#!/bin/python3

from pathlib import Path
import argparse
import logging

def dumb_copy(s:Path, d:Path, args) :
    """
    Copies the content of source file to destination file
    """
    if args.verbose : 
        logging.info(f"Copying '{s}' to '{d}'")

    with open(s, "rb") as fp1, open(d, "wb+") as fp2 :
        for line in fp1 :
            fp2.write(line)

def fuzzy_isin(f:Path, l:list, whole_path, fuzzy) : 
    """
    Given a path and a list of strings (to include or exclude), returns True if any of the strings is in the path (name or whole path). 
    
    - `whole_path` : bool, defines if we match the full path or only the file/dir name
    - `fuzzy` : bool, defines if we actually want to be fuzzy
    """
    if not fuzzy : 
        return f.name in l

    search_str = f.name if not whole_path else str(f)
    for pattern in l :
        if pattern in search_str : 
            return True
    return False



def recursive_copy(s:Path, d:Path, args:argparse.Namespace) :
    """
    Copies the content of a file or folder into another file or folder
    """

    if fuzzy_isin(s, args.exclude, args.whole_path, args.fuzzy) and not fuzzy_isin(s, args.include, args.whole_path, args.fuzzy) :
        logging.info(f"Skipped '{s}' (--exclude)")
        return

    if s.is_dir() :
        if not d.exists() :
            if args.verbose : 
                logging.info(f"Creating dir '{d}'")
            
            d.mkdir()

        for subelmt in s.iterdir() :
            recursive_copy(subelmt, d / subelmt.name, args)
    else :
        if args.include and not fuzzy_isin(s, args.include, args.whole_path, args.fuzzy) :
            logging.info(f"Skipped '{s}' (not in --include)")
            return

        dumb_copy(s, d, args)


if __name__ == "__main__" : 

    logging.basicConfig(level=logging.INFO, format='[%(levelname)s] [%(module)s] %(message)s')
    help_str = """
    This script is intended to replace cp and rsync on the cluster, in cases where you wish to inherit ACLs.

    Use :
    > pycopy.py source_file target_file
    > pycopy.py file1 file2 dir1 target/dir
    """

    parser = argparse.ArgumentParser(description=help_str, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("source", nargs="+", help="One or several files/directories")
    parser.add_argument("dest", nargs=1, help="Destination file or directory")
    parser.add_argument("--exclude", nargs="*", default=[], help="File/dir names to skip")
    parser.add_argument("--include", nargs="*", default=[], help="Copy only **files** where name is given")
    parser.add_argument("-f", "--fuzzy", action="store_true", help="Allows to match file and dir names partially in --exclude and --include")
    parser.add_argument("-w", "--whole-path", action="store_true", help="For --include and --exclude combined with --fuzzy : matches the entirety of the given path instead of just the name")
    parser.add_argument("-v", "--verbose", action="store_true")
    args = parser.parse_args()

    source = [Path(s) for s in args.source]
    dest = Path(args.dest[0])

    # checks
    err = False
    for s in source :
        if not s.exists() :
            logging.error(f"{s} : no such file or directory")
            err = True

    if not dest.parent.exists() :
        logging.error(f"Cannot write in '{dest.parent}', no such file or directory")
        err = True

    if len(source) > 1 :
        if not dest.is_dir() :
            logging.error(f"Target '{dest}' is not a directory")
            err = True

    if err :
        exit(1)



    if len(source) == 1 :
        source = source[0]
        if source.is_file() and dest.is_dir() :
            recursive_copy(source, dest / source.name, args)
        else :
            recursive_copy(source, dest, args)

    else :
        for elmt in source :
            recursive_copy(elmt, dest / elmt.name, args)